// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3853.ProgTrainingRobot.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3853.ProgTrainingRobot.Robot;

/**
 *
 */
public class DriveMaster extends Command {
  
  private Joystick stick;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveMaster() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.setInterruptible(true);
        this.setRunWhenDisabled(false);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
      
      stick = Robot.oi.getMasterGamePad();
      
      // remap getX() and getY() to the right stick on the gamepad 
      stick.setAxisChannel(AxisType.kX, 4);
      stick.setAxisChannel(AxisType.kY, 5);
     
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
      // arcade method of the drive controller has a short timeout so we have to call it repeatedly
      Robot.drive.doTeleop(stick);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
      return false;
    }

    // Called once after isFinished returns true
    protected void end() {
      Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
      end();
    }
  }